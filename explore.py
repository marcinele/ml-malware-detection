import os
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt



    

def explore_labels_classification():
    df = pd.read_csv("trainLabels.csv")
    id_, classification_column = df.columns
    grouped = df.groupby(classification_column).count()
    grouped.rename(columns={'Id': "NumberOfMalware"}, inplace=True)
    pd.DataFrame(grouped).to_csv("stats_of_dataset.csv")


def calculate_percent():
    df = pd.read_csv("stats_of_dataset.csv")
    sum_of_malware = df['NumberOfMalware'].sum()
    df['Percentages'] = ((df['NumberOfMalware'] / sum_of_malware) * 100).round(decimals=2)
    pd.DataFrame(df).to_csv("stats_of_dataset.csv", index=False)

    x = df['Class'].values
    y = df['Percentages'].values

    plt.bar(x, y, edgecolor="red", color='black')
    axy = plt.subplot()
    axy.set_xticks(x)
    # axy.set_yticks(np.arange(0, 100, 10, dtype=int))
    plt.xlabel("Malware Class")
    plt.ylabel("Percantage of occurence [%]")
    plt.show()


def file_size_malware_type():
    def coroutine_decorator(func):
        def wrap(*args, **kwargs):
            cr = func(*args, **kwargs)
            next(cr)
            return cr
        return wrap

    @coroutine_decorator
    def get_size_of_file(func=None):
        try:
            while True:
                path_file = yield
                size = os.path.getsize(path_file)
                func.send(f"{size} {path_file}")
        except GeneratorExit:
            print("Closed! get_size")

    @coroutine_decorator
    def apply_the_size():
        try:
            while True:
                size_file = yield
                size, file = size_file.split(" ")
                # file = file.rsplit("/", maxsplit=1)[-1]
                df.loc[file, "Bytes"] = size
        except GeneratorExit:
            print("Closed! apply_the_size")


    PATH = "bytes_raw"

    df = pd.read_csv("trainLabels.csv")
    os.chdir(os.path.dirname(f"./{PATH}/"))
    df.set_index('Id', inplace=True)
    df['Bytes'] = np.nan
    # print(df.loc["04EjIdbPV5e1XroFOpiN"]['Bytes'])
    bytes_raw = os.listdir(".")
    print(bytes_raw)
    gsf = get_size_of_file(apply_the_size())
    for malware in bytes_raw:
        gsf.send(malware)
    print(df)
    os.chdir(os.path.dirname("../"))
    pd.DataFrame(df).to_csv("Malware_class_bytes.csv", index=True)


if __name__ == "__main__":
    # explore_labels_classification()
    # calculate_percent()
    file_size_malware_type()