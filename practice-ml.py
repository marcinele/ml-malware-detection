import os
import shutil

import pandas as pd
import numpy as np
from tqdm import tqdm


DIRECTORY_TO_PROCESS = "train/"
DIRECTORY_TO_WRITE = "bytes_raw/"
files_to_process = os.listdir("train")

processed_files_bytes_raw = os.listdir("bytes_raw")

def entry_process_file(path_to_process: str, path_to_write: str, filenames: list[str]):
    with tqdm(total=len(filenames), desc="Entry preprocessing: ") as bar:
        if not os.path.exists(path_to_write):
            os.makedirs(path_to_write)

        for filename in filenames:
            filename_to_write = filename.split(".")[0]
            file_to_write = open(f"{path_to_write}{filename_to_write}", mode="w+")
            with open(f"{path_to_process}{filename}", mode="rb") as file_handler:
                read_file = file_handler.read().decode().splitlines()
                for line in read_file:
                    if "?" in line:
                        continue
                    line_to_write = " ".join(line.split()[1:])
                    file_to_write.write(f"{line_to_write}\n")
                file_to_write.close()
                bar.update(1)


def coroutine_decorator(func):
    def wrap(*args, **kwargs):
        cr = func(*args, **kwargs)
        next(cr)
        return cr
    return wrap


def directories_with_files_per_class():
    @coroutine_decorator
    def file_category(func=None):
        try:
            while True:
                malware_file = yield
                category_of_malware = files_class.get(malware_file)
                destination = f"{DIRECTORY_AGGREGATION_MALWARE}{category_of_malware}/{malware_file}"
                func.send(destination)
        except GeneratorExit:
            print("Closing! file_category")

    @coroutine_decorator
    def copy_aggregation_malware():
        try:
            while True:
                dest_path = yield
                malware_file = dest_path.rsplit("/", maxsplit=1)[-1]
                shutil.copy(f"bytes_raw/{malware_file}", dest_path)
        except GeneratorExit:
            print("Closing! aggregation")


    DIRECTORY_AGGREGATION_MALWARE = "malware_types_aggregated/"

    df = pd.read_csv("trainLabels.csv")
    df.set_index("Id", inplace=True)
    files_class = df.to_dict()['Class']
    classes_of_malware = set(map(lambda number: f"{number}", files_class.values()))
    if not os.path.isdir(DIRECTORY_AGGREGATION_MALWARE):
        os.makedirs(DIRECTORY_AGGREGATION_MALWARE)

    {os.makedirs(f"{DIRECTORY_AGGREGATION_MALWARE}{directory}") for directory in classes_of_malware
                                    if not os.path.isdir(f"{DIRECTORY_AGGREGATION_MALWARE}{directory}")}

    fc = file_category(copy_aggregation_malware())
    byte_files = os.listdir('bytes_raw')
    with tqdm(total=len(byte_files), desc="Aggregation of malware: ") as bar:
        for byte_file in byte_files:
            category_of_malware = files_class.get(byte_file)
            shutil.copy(f"bytes_raw/{byte_file}", f"{DIRECTORY_AGGREGATION_MALWARE}\
{category_of_malware}/{byte_file}")
            fc.send(byte_file)
            bar.update(1)


if __name__ == "__main__":
    # entry_process_file(DIRECTORY_TO_PROCESS, DIRECTORY_TO_WRITE,files_to_process)
    directories_with_files_per_class("", "")